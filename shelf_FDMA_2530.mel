global proc shelf_FDMA_2530 () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "\"\"\"\nThis script sources the CMI Modeling Checklist from github. It will be used in the FDMA 2530 Shelf that I will give to students at CMI at NMSU. \nThe students will receive the shelf \"shelf_FDMA_2530.mel\" and there will only be one button on it. In future updates I might add more tools. \nIf there are any issues please contact:\n Alexander T. Santiago - github.com/atsantiago\n asanti89@nmsu.edu\n\n \n V1.0\n Only have CMI Modleing Checklist on shelf. (V2.0)\n\"\"\"\n\n\nimport os\nimport sys\nimport urllib.request\nimport tempfile\n\n# Update the following variables with your GitHub information:\nrepository_url = \"https://github.com/Atsantiago/NMSU_Scripts\"\nscript_path = \"cmi_modeling_checklist.py\"\n\n# Check the Maya Python version\nif sys.version_info.major == 2:\n    # Python 2\n    exec_function = execfile\nelse:\n    # Python 3\n    exec_function = exec\n\n# Create a temporary directory to download the script\ntemp_dir = tempfile.mkdtemp()\n\n# Download the script from GitHub\nscript_url = f\"{repository_url}/raw/master/{script_path}\"\nscript_file = os.path.join(temp_dir, os.path.basename(script_path))\n\nurllib.request.urlretrieve(script_url, script_file)\n\n# Source the script in Maya\nmaya_script_path = os.path.join(temp_dir, \"cmi_modeling_checklist.py\")\n\nif os.path.isfile(maya_script_path):\n    with open(maya_script_path, \"r\") as file:\n        script_contents = file.read()\n        exec_function(script_contents, globals())\nelse:\n    print(f\"Failed to locate the script: {maya_script_path}\")\n" 
        -enableBackground 1
        -backgroundColor 0 0.588998 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Checklist" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -overlayLabelColor 0.0889 0.2379 0.0889 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "checkboxOn.png" 
        -image1 "checkboxOn.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "\"\"\"\nThis script sources the CMI Modeling Checklist from github. It will be used in the FDMA 2530 Shelf that I will give to students at CMI at NMSU. \nThe students will receive the shelf \"shelf_FDMA_2530.mel\" and there will only be one button on it. In future updates I might add more tools. \nIf there are any issues please contact:\n Alexander T. Santiago - github.com/atsantiago\n asanti89@nmsu.edu\n\n \n V1.0\n Only have CMI Modleing Checklist on shelf. (V2.0)\n\"\"\"\n\n\nimport os\nimport sys\nimport urllib.request\nimport tempfile\n\n# Update the following variables with your GitHub information:\nrepository_url = \"https://github.com/Atsantiago/NMSU_Scripts\"\nscript_path = \"cmi_modeling_checklist.py\"\n\n# Check the Maya Python version\nif sys.version_info.major == 2:\n    # Python 2\n    exec_function = execfile\nelse:\n    # Python 3\n    exec_function = exec\n\n# Create a temporary directory to download the script\ntemp_dir = tempfile.mkdtemp()\n\n# Download the script from GitHub\nscript_url = f\"{repository_url}/raw/master/{script_path}\"\nscript_file = os.path.join(temp_dir, os.path.basename(script_path))\n\nurllib.request.urlretrieve(script_url, script_file)\n\n# Source the script in Maya\nmaya_script_path = os.path.join(temp_dir, \"cmi_modeling_checklist.py\")\n\nif os.path.isfile(maya_script_path):\n    with open(maya_script_path, \"r\") as file:\n        script_contents = file.read()\n        exec_function(script_contents, globals())\nelse:\n    print(f\"Failed to locate the script: {maya_script_path}\")\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    separator
        -enable 1
        -width 12
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    separator
        -enable 1
        -width 12
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 2
        -flexibleWidthValue 64
        -enable 1
        -width 64
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "\"\"\"\nCreated by Alexander T. Santiago - github.com/atsantiago\nThis script should update the shelf FDMA_2530. \n\"\"\"\nimport os\nimport shutil\nimport urllib.request\nimport maya.cmds as cmds\nimport platform\nimport ctypes\nfrom PySide2 import QtWidgets, QtGui, QtCore\n\n# Update the following variables with your GitHub information:\nrepository_url = \"https://github.com/Atsantiago/NMSU_Scripts\"\nscript_path = \"shelf_FDMA_2530.mel\"\n\n# Download the updated shelf script from GitHub\nscript_url = f\"{repository_url}/raw/master/{script_path}\"\n\n# Determine the active version of Maya\nmaya_version = cmds.about(version=True)\n\n# Determine the location of the default Downloads folder based on the operating system\nsystem = platform.system()\nif system == \"Windows\":\n    default_downloads_folder = os.path.join(os.path.expanduser(\"~\"), \"Downloads\")\nelif system == \"Darwin\":  # macOS\n    default_downloads_folder = os.path.join(os.path.expanduser(\"~\"), \"Downloads\")\nelse:  # Linux\n    default_downloads_folder = os.path.join(os.path.expanduser(\"~\"), \"Downloads\")\n\ntemp_script_file = os.path.join(default_downloads_folder, \"temp_script.mel\")\n\nurllib.request.urlretrieve(script_url, temp_script_file)\n\n# Determine the location of the existing shelf script in Maya based on the active version\nif system == \"Windows\":\n    mel_folder = os.path.join(os.environ[\"USERPROFILE\"], \"Documents\", \"maya\", maya_version, \"prefs\", \"shelves\")\nelif system == \"Darwin\":  # macOS\n    mel_folder = os.path.join(os.path.expanduser(\"~\"), \"Library\", \"Preferences\", \"Autodesk\", \"maya\", maya_version, \"prefs\", \"shelves\")\nelse:  # Linux\n    mel_folder = os.path.join(os.path.expanduser(\"~\"), \"maya\", maya_version, \"prefs\", \"shelves\")\n\nexisting_script_path = os.path.join(mel_folder, \"shelf_FDMA_2530.mel\")\n\n# Check if the existing shelf script file exists\nif not os.path.exists(existing_script_path):\n    # Prompt the user to select the file's location\n    msg_box = QtWidgets.QMessageBox()\n    msg_box.setIcon(QtWidgets.QMessageBox.Warning)\n    msg_box.setWindowTitle(\"Shelf Script Location\")\n    msg_box.setText(\"The existing shelf script file (shelf_FDMA_2530.mel) was not found. Please select its location.\")\n    msg_box.setStandardButtons(QtWidgets.QMessageBox.Ok)\n    msg_box.exec_()\n\n    # Open a file dialog to select the file's location\n    dialog = QtWidgets.QFileDialog()\n    dialog.setFileMode(QtWidgets.QFileDialog.ExistingFile)\n    dialog.setWindowTitle(\"Select Shelf Script File\")\n    dialog.setDirectory(mel_folder)\n    if dialog.exec_():\n        existing_script_path = dialog.selectedFiles()[0]\n\n# Print the existing script path\nprint(existing_script_path)\n\n# Compare the existing and updated script versions\nis_updated = False\n\nwith open(temp_script_file, \"r\") as updated_file, open(existing_script_path, \"r\") as existing_file:\n    updated_contents = updated_file.read()\n    existing_contents = existing_file.read()\n\nif updated_contents != existing_contents:\n    is_updated = True\n    # Replace the existing shelf script with the updated one\n    shutil.move(temp_script_file, existing_script_path)\n    # Modify the permissions of the new shelf script file\n    os.chmod(existing_script_path, 0o755)\n\n# Remove the temporary file\nos.remove(temp_script_file)\n\n# Display a pop-up dialogue indicating if the shelf is up to date\nif is_updated:\n    cmds.confirmDialog(title=\"Shelf Update\", message=\"Shelf has been updated.\", button=[\"OK\"], defaultButton=\"OK\")\nelse:\n    cmds.confirmDialog(title=\"Shelf Update\", message=\"Shelf is up to date.\", button=[\"OK\"], defaultButton=\"OK\")\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Update Shelf" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0 
        -image "updateApp.png" 
        -image1 "updateApp.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "\"\"\"\nCreated by Alexander T. Santiago - github.com/atsantiago\nThis script should update the shelf FDMA_2530. \n\"\"\"\nimport os\nimport shutil\nimport urllib.request\nimport maya.cmds as cmds\nimport platform\nimport ctypes\nfrom PySide2 import QtWidgets, QtGui, QtCore\n\n# Update the following variables with your GitHub information:\nrepository_url = \"https://github.com/Atsantiago/NMSU_Scripts\"\nscript_path = \"shelf_FDMA_2530.mel\"\n\n# Download the updated shelf script from GitHub\nscript_url = f\"{repository_url}/raw/master/{script_path}\"\n\n# Determine the active version of Maya\nmaya_version = cmds.about(version=True)\n\n# Determine the location of the default Downloads folder based on the operating system\nsystem = platform.system()\nif system == \"Windows\":\n    default_downloads_folder = os.path.join(os.path.expanduser(\"~\"), \"Downloads\")\nelif system == \"Darwin\":  # macOS\n    default_downloads_folder = os.path.join(os.path.expanduser(\"~\"), \"Downloads\")\nelse:  # Linux\n    default_downloads_folder = os.path.join(os.path.expanduser(\"~\"), \"Downloads\")\n\ntemp_script_file = os.path.join(default_downloads_folder, \"temp_script.mel\")\n\nurllib.request.urlretrieve(script_url, temp_script_file)\n\n# Determine the location of the existing shelf script in Maya based on the active version\nif system == \"Windows\":\n    mel_folder = os.path.join(os.environ[\"USERPROFILE\"], \"Documents\", \"maya\", maya_version, \"prefs\", \"shelves\")\nelif system == \"Darwin\":  # macOS\n    mel_folder = os.path.join(os.path.expanduser(\"~\"), \"Library\", \"Preferences\", \"Autodesk\", \"maya\", maya_version, \"prefs\", \"shelves\")\nelse:  # Linux\n    mel_folder = os.path.join(os.path.expanduser(\"~\"), \"maya\", maya_version, \"prefs\", \"shelves\")\n\nexisting_script_path = os.path.join(mel_folder, \"shelf_FDMA_2530.mel\")\n\n# Check if the existing shelf script file exists\nif not os.path.exists(existing_script_path):\n    # Prompt the user to select the file's location\n    msg_box = QtWidgets.QMessageBox()\n    msg_box.setIcon(QtWidgets.QMessageBox.Warning)\n    msg_box.setWindowTitle(\"Shelf Script Location\")\n    msg_box.setText(\"The existing shelf script file was not found. Please select its location.\")\n    msg_box.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)\n    msg_box.setDefaultButton(QtWidgets.QMessageBox.Ok)\n    ret = msg_box.exec_()\n    \n    if ret == QtWidgets.QMessageBox.Ok:\n        # Open a file dialog to select the file's location\n        dialog = QtWidgets.QFileDialog()\n        dialog.setFileMode(QtWidgets.QFileDialog.ExistingFile)\n        dialog.setWindowTitle(\"Select Shelf Script File\")\n        dialog.setDirectory(mel_folder)\n        if dialog.exec_():\n            existing_script_path = dialog.selectedFiles()[0]\n    else:\n        cmds.confirmDialog(title=\"Shelf Update\", message=\"Shelf update canceled.\", button=[\"OK\"], defaultButton=\"OK\")\n        # Remove the temporary file\n        os.remove(temp_script_file)\n        exit()\n\n# Print the existing script path\nprint(existing_script_path)\n\n# Compare the existing and updated script versions\nis_updated = False\n\nwith open(temp_script_file, \"r\") as updated_file, open(existing_script_path, \"r\") as existing_file:\n    updated_contents = updated_file.read()\n    existing_contents = existing_file.read()\n\nif updated_contents != existing_contents:\n    is_updated = True\n    # Replace the existing shelf script with the updated one\n    shutil.move(temp_script_file, existing_script_path)\n    # Modify the permissions of the new shelf script file\n    os.chmod(existing_script_path, 0o755)\n\n# Remove the temporary file\nos.remove(temp_script_file)\n\n# Display a pop-up dialogue indicating if the shelf is up to date\nif is_updated:\n    cmds.confirmDialog(title=\"Shelf Update\", message=\"Shelf has been updated.\", button=[\"OK\"], defaultButton=\"OK\")\nelse:\n    cmds.confirmDialog(title=\"Shelf Update\", message=\"Shelf is up to date.\", button=[\"OK\"], defaultButton=\"OK\")" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
        ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create a polygonal sphere on the grid" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Sphere" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "polySphere.png" 
        -image1 "polySphere.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "polySphere -r 1 -sx 20 -sy 20 -ax 0 1 0 -cuv 2 -ch 1; objectMoveCommand;" 
        -sourceType "mel" 
        -doubleClickCommand "CreatePolygonSphereOptions" 
        -commandRepeatable 1
        -flat 1
    ;

} 