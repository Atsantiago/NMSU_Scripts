global proc shelf_FDMA_2530 () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "\"\"\"\nThis script sources the CMI Modeling Checklist from github. It will be used in the FDMA 2530 Shelf that I will give to students at CMI at NMSU. \nThe students will receive the shelf \"shelf_FDMA_2530.mel\" and there will only be one button on it. In future updates I might add more tools. \nIf there are any issues please contact:\n Alexander T. Santiago - github.com/atsantiago\n asanti89@nmsu.edu\n\n \n V1.0\n Only have CMI Modleing Checklist on shelf. (V2.0)\n\"\"\"\n\n\nimport os\nimport sys\nimport urllib.request\nimport tempfile\n\n# Update the following variables with your GitHub information:\nrepository_url = \"https://github.com/Atsantiago/NMSU_Scripts\"\nscript_path = \"cmi_modeling_checklist.py\"\n\n# Check the Maya Python version\nif sys.version_info.major == 2:\n    # Python 2\n    exec_function = execfile\nelse:\n    # Python 3\n    exec_function = exec\n\n# Create a temporary directory to download the script\ntemp_dir = tempfile.mkdtemp()\n\n# Download the script from GitHub\nscript_url = f\"{repository_url}/raw/master/{script_path}\"\nscript_file = os.path.join(temp_dir, os.path.basename(script_path))\n\nurllib.request.urlretrieve(script_url, script_file)\n\n# Source the script in Maya\nmaya_script_path = os.path.join(temp_dir, \"cmi_modeling_checklist.py\")\n\nif os.path.isfile(maya_script_path):\n    with open(maya_script_path, \"r\") as file:\n        script_contents = file.read()\n        exec_function(script_contents, globals())\nelse:\n    print(f\"Failed to locate the script: {maya_script_path}\")\n" 
        -enableBackground 1
        -backgroundColor 0 0.588998 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Checklist" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -overlayLabelColor 0.0889 0.2379 0.0889 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "checkboxOn.png" 
        -image1 "checkboxOn.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "\"\"\"\nThis script sources the CMI Modeling Checklist from github. It will be used in the FDMA 2530 Shelf that I will give to students at CMI at NMSU. \nThe students will receive the shelf \"shelf_FDMA_2530.mel\" and there will only be one button on it. In future updates I might add more tools. \nIf there are any issues please contact:\n Alexander T. Santiago - github.com/atsantiago\n asanti89@nmsu.edu\n\n \n V1.0\n Only have CMI Modleing Checklist on shelf. (V2.0)\n\"\"\"\n\n\nimport os\nimport sys\nimport urllib.request\nimport tempfile\n\n# Update the following variables with your GitHub information:\nrepository_url = \"https://github.com/Atsantiago/NMSU_Scripts\"\nscript_path = \"cmi_modeling_checklist.py\"\n\n# Check the Maya Python version\nif sys.version_info.major == 2:\n    # Python 2\n    exec_function = execfile\nelse:\n    # Python 3\n    exec_function = exec\n\n# Create a temporary directory to download the script\ntemp_dir = tempfile.mkdtemp()\n\n# Download the script from GitHub\nscript_url = f\"{repository_url}/raw/master/{script_path}\"\nscript_file = os.path.join(temp_dir, os.path.basename(script_path))\n\nurllib.request.urlretrieve(script_url, script_file)\n\n# Source the script in Maya\nmaya_script_path = os.path.join(temp_dir, \"cmi_modeling_checklist.py\")\n\nif os.path.isfile(maya_script_path):\n    with open(maya_script_path, \"r\") as file:\n        script_contents = file.read()\n        exec_function(script_contents, globals())\nelse:\n    print(f\"Failed to locate the script: {maya_script_path}\")\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    separator
        -enable 1
        -width 12
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    separator
        -enable 1
        -width 12
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -style "shelf" 
        -horizontal 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 2
        -flexibleWidthValue 64
        -enable 1
        -width 64
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "\"\"\"\nCreated by Alexander T. Santiago - github.com/atsantiago\nThis script should update the shelf FDMA_2530.\n\"\"\"\nimport os\nimport sys\nimport urllib.request\nimport tempfile\nimport maya.cmds as cmds\nimport maya.mel as mel\nfrom PySide2 import QtWidgets\nimport shutil\n\n# Update the following variables with your GitHub information:\nrepository_url = \"https://github.com/Atsantiago/NMSU_Scripts\"\nupdated_script_path = \"shelf_FDMA_2530.mel\"\n\n# Check the Maya Python version\nif sys.version_info.major == 2:\n    # Python 2\n    exec_function = execfile\nelse:\n    # Python 3\n    exec_function = exec\n\n# Create a temporary directory to download the script\ntemp_dir = tempfile.mkdtemp()\n\n# Download the updated shelf script from GitHub\nupdated_script_url = f\"{repository_url}/raw/master/{updated_script_path}\"\nupdated_script_file = os.path.join(temp_dir, os.path.basename(updated_script_path))\n\nurllib.request.urlretrieve(updated_script_url, updated_script_file)\n\n# Prompt the user to locate the current shelf MEL file or cancel the update\nmsg_box = QtWidgets.QMessageBox()\nmsg_box.setWindowTitle(\"Shelf Update\")\nmsg_box.setText(\"To update the shelf script, please locate the current shelf script file or cancel the update.\")\nmsg_box.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)\nmsg_box.setDefaultButton(QtWidgets.QMessageBox.Ok)\nmsg_box.setEscapeButton(QtWidgets.QMessageBox.Cancel)\nret = msg_box.exec_()\n\nif ret == QtWidgets.QMessageBox.Ok:\n    while True:\n        # Prompt the user to locate the current shelf MEL file\n        dialog = QtWidgets.QFileDialog()\n        dialog.setWindowTitle(\"Select Current Shelf MEL File\")\n        dialog.setDirectory(cmds.internalVar(userShelfDir=True))\n        dialog.setNameFilter(\"Shelf MEL Files (*.mel)\")\n        dialog.setFileMode(QtWidgets.QFileDialog.ExistingFile)\n        if dialog.exec_():\n            selected_files = dialog.selectedFiles()\n            if selected_files:\n                current_script_file = selected_files[0]\n                selected_shelf_name = os.path.splitext(os.path.basename(current_script_file))[0]\n                if selected_shelf_name == \"shelf_FDMA_2530\":\n                    break\n                else:\n                    confirm_msg_box = QtWidgets.QMessageBox()\n                    confirm_msg_box.setWindowTitle(\"Shelf Verification\")\n                    confirm_msg_box.setText(\"The selected shelf script does not match the expected shelf script name (shelf_FDMA_2530).\\n\\nPlease verify the selection or cancel the update.\")\n                    confirm_msg_box.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)\n                    confirm_msg_box.setDefaultButton(QtWidgets.QMessageBox.Ok)\n                    confirm_msg_box.setEscapeButton(QtWidgets.QMessageBox.Cancel)\n                    confirm_ret = confirm_msg_box.exec_()\n                    if confirm_ret == QtWidgets.QMessageBox.Cancel:\n                        print(\"Shelf update operation cancelled.\")\n                        sys.exit(0)  # Exit the script if operation is cancelled\n            else:\n                print(\"Shelf update operation cancelled.\")\n                sys.exit(0)  # Exit the script if operation is cancelled\n        else:\n            print(\"Shelf update operation cancelled.\")\n            sys.exit(0)  # Exit the script if operation is cancelled\nelse:\n    print(\"Shelf update operation cancelled.\")\n    sys.exit(0)  # Exit the script if operation is cancelled\n\n# Compare the downloaded script with the current shelf MEL file\nwith open(updated_script_file, \"r\") as updated_file, open(current_script_file, \"r\") as current_file:\n    updated_contents = updated_file.read()\n    current_contents = current_file.read()\n\nif updated_contents != current_contents:\n    # Create a backup of the existing shelf\n    backup_file = current_script_file + \".bak\"\n    shutil.copy(current_script_file, backup_file)\n\n    # Overwrite the current shelf MEL file with the downloaded script\n    shutil.copy(updated_script_file, current_script_file)\n    print(\"Shelf updated successfully!\")\n    QtWidgets.QMessageBox.information(None, \"Shelf Update\", \"Shelf updated successfully!\")\nelse:\n    print(\"Shelf is up to date.\")\n    QtWidgets.QMessageBox.information(None, \"Shelf Update\", \"Shelf is up to date.\")\n\n# Reload the shelf\nshelf_name = \"FDMA_2530\"  # Specify the name of the shelf to update\n\n# Check if the shelf exists\nif cmds.shelfLayout(shelf_name, exists=True):\n    cmds.deleteUI(shelf_name, layout=True)\n\n# Load the updated shelf into Maya\nupdated_shelf_path = current_script_file.replace(\"\\\\\", \"/\")\nmel.eval(f'loadNewShelf \"{updated_shelf_path}\"')\n\n# Check if the shelf was successfully reloaded\nif cmds.shelfLayout(shelf_name, exists=True):\n    print(\"Shelf reloaded successfully!\")\nelse:\n    if os.path.isfile(backup_file):\n        # Restore the backup\n        backup_file_without_extension = backup_file[:-4]\n        shutil.copy(backup_file, current_script_file)\n        print(\"An error occurred during the update. Shelf restored from backup.\")\n        # Load the original shelf from the backup\n        mel.eval(f'source \"{backup_file_without_extension}\"')\n        if cmds.shelfLayout(shelf_name, exists=True):\n            print(\"Original shelf restored successfully!\")\n        else:\n            print(\"Failed to restore the original shelf.\")\n    else:\n        print(\"An error occurred during the update. Unable to restore the shelf.\")\n\n# Remove the backup file\nif os.path.isfile(backup_file):\n    os.remove(backup_file)\n\n# Remove the temporary directory\nshutil.rmtree(temp_dir)\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Update" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0 
        -image "updateApp.png" 
        -image1 "updateApp.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "\"\"\"\nCreated by Alexander T. Santiago - github.com/atsantiago\nThis script should update the shelf FDMA_2530.\n\"\"\"\nimport os\nimport sys\nimport urllib.request\nimport tempfile\nimport maya.cmds as cmds\nimport maya.mel as mel\nfrom PySide2 import QtWidgets\nimport shutil\n\n# Update the following variables with your GitHub information:\nrepository_url = \"https://github.com/Atsantiago/NMSU_Scripts\"\nupdated_script_path = \"shelf_FDMA_2530.mel\"\n\n# Check the Maya Python version\nif sys.version_info.major == 2:\n    # Python 2\n    exec_function = execfile\nelse:\n    # Python 3\n    exec_function = exec\n\n# Create a temporary directory to download the script\ntemp_dir = tempfile.mkdtemp()\n\n# Download the updated shelf script from GitHub\nupdated_script_url = f\"{repository_url}/raw/master/{updated_script_path}\"\nupdated_script_file = os.path.join(temp_dir, os.path.basename(updated_script_path))\n\nurllib.request.urlretrieve(updated_script_url, updated_script_file)\n\n# Prompt the user to locate the current shelf MEL file or cancel the update\nmsg_box = QtWidgets.QMessageBox()\nmsg_box.setWindowTitle(\"Shelf Update\")\nmsg_box.setText(\"To update the shelf script, please locate the current shelf script file or cancel the update.\")\nmsg_box.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)\nmsg_box.setDefaultButton(QtWidgets.QMessageBox.Ok)\nmsg_box.setEscapeButton(QtWidgets.QMessageBox.Cancel)\nret = msg_box.exec_()\n\nif ret == QtWidgets.QMessageBox.Ok:\n    while True:\n        # Prompt the user to locate the current shelf MEL file\n        dialog = QtWidgets.QFileDialog()\n        dialog.setWindowTitle(\"Select Current Shelf MEL File\")\n        dialog.setDirectory(cmds.internalVar(userShelfDir=True))\n        dialog.setNameFilter(\"Shelf MEL Files (*.mel)\")\n        dialog.setFileMode(QtWidgets.QFileDialog.ExistingFile)\n        if dialog.exec_():\n            selected_files = dialog.selectedFiles()\n            if selected_files:\n                current_script_file = selected_files[0]\n                selected_shelf_name = os.path.splitext(os.path.basename(current_script_file))[0]\n                if selected_shelf_name == \"shelf_FDMA_2530\":\n                    break\n                else:\n                    confirm_msg_box = QtWidgets.QMessageBox()\n                    confirm_msg_box.setWindowTitle(\"Shelf Verification\")\n                    confirm_msg_box.setText(\"The selected shelf script does not match the expected shelf script name (shelf_FDMA_2530).\\n\\nPlease verify the selection or cancel the update.\")\n                    confirm_msg_box.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)\n                    confirm_msg_box.setDefaultButton(QtWidgets.QMessageBox.Ok)\n                    confirm_msg_box.setEscapeButton(QtWidgets.QMessageBox.Cancel)\n                    confirm_ret = confirm_msg_box.exec_()\n                    if confirm_ret == QtWidgets.QMessageBox.Cancel:\n                        print(\"Shelf update operation cancelled.\")\n                        sys.exit(0)  # Exit the script if operation is cancelled\n            else:\n                print(\"Shelf update operation cancelled.\")\n                sys.exit(0)  # Exit the script if operation is cancelled\n        else:\n            print(\"Shelf update operation cancelled.\")\n            sys.exit(0)  # Exit the script if operation is cancelled\nelse:\n    print(\"Shelf update operation cancelled.\")\n    sys.exit(0)  # Exit the script if operation is cancelled\n\n# Compare the downloaded script with the current shelf MEL file\nwith open(updated_script_file, \"r\") as updated_file, open(current_script_file, \"r\") as current_file:\n    updated_contents = updated_file.read()\n    current_contents = current_file.read()\n\nif updated_contents != current_contents:\n    # Create a backup of the existing shelf\n    backup_file = current_script_file + \".bak\"\n    shutil.copy(current_script_file, backup_file)\n\n    # Overwrite the current shelf MEL file with the downloaded script\n    shutil.copy(updated_script_file, current_script_file)\n    print(\"Shelf updated successfully!\")\n    QtWidgets.QMessageBox.information(None, \"Shelf Update\", \"Shelf updated successfully!\")\nelse:\n    print(\"Shelf is up to date.\")\n    QtWidgets.QMessageBox.information(None, \"Shelf Update\", \"Shelf is up to date.\")\n\n# Reload the shelf\nshelf_name = \"FDMA_2530\"  # Specify the name of the shelf to update\n\n# Check if the shelf exists\nif cmds.shelfLayout(shelf_name, exists=True):\n    cmds.deleteUI(shelf_name, layout=True)\n\n# Load the updated shelf into Maya\nupdated_shelf_path = current_script_file.replace(\"\\\\\", \"/\")\nmel.eval(f'loadNewShelf \"{updated_shelf_path}\"')\n\n# Check if the shelf was successfully reloaded\nif cmds.shelfLayout(shelf_name, exists=True):\n    print(\"Shelf reloaded successfully!\")\nelse:\n    if os.path.isfile(backup_file):\n        # Restore the backup\n        backup_file_without_extension = backup_file[:-4]\n        shutil.copy(backup_file, current_script_file)\n        print(\"An error occurred during the update. Shelf restored from backup.\")\n        # Load the original shelf from the backup\n        mel.eval(f'source \"{backup_file_without_extension}\"')\n        if cmds.shelfLayout(shelf_name, exists=True):\n            print(\"Original shelf restored successfully!\")\n        else:\n            print(\"Failed to restore the original shelf.\")\n    else:\n        print(\"An error occurred during the update. Unable to restore the shelf.\")\n\n# Remove the backup file\nif os.path.isfile(backup_file):\n    os.remove(backup_file)\n\n# Remove the temporary directory\nshutil.rmtree(temp_dir)\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
